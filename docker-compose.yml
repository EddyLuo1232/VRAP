services:
  ssh_server:
    image: my-ssh-image
    privileged: true
    container_name: my_ssh_server
    networks:
      my_network:
        ipv4_address: 192.168.2.100
    ports:
    - '2222:22'
    volumes:
    - ssh_server_data:/root/.ssh
    command: "bash -c \"\n  mkdir -p /var/run/sshd &&\n  echo 'root:ubuntu' | chpasswd\
      \ &&\n  mkdir -p /root/.ssh && chmod 700 /root/.ssh &&\n  touch /root/.ssh/authorized_keys\
      \ && chmod 600 /root/.ssh/authorized_keys &&\n  sed -i 's/#\\?PermitRootLogin.*/PermitRootLogin\
      \ yes/' /etc/ssh/sshd_config &&\n  sed -i 's/#\\?PasswordAuthentication.*/PasswordAuthentication\
      \ yes/' /etc/ssh/sshd_config &&\n  sed -i 's/#\\?PubkeyAuthentication.*/PubkeyAuthentication\
      \ yes/' /etc/ssh/sshd_config &&\n  /usr/sbin/sshd -D\n\"\n"
  ssh_client:
    image: my-ssh-image
    privileged: true
    container_name: my_ssh_client
    user: root
    networks:
      my_network:
        ipv4_address: 192.168.2.101
    depends_on:
    - ssh_server
    volumes:
    - ssh_client_data:/root/.ssh
    - ssh_user_data:/home/user/.ssh
    command: "bash -c \"\n  # Detect current user and set up variables\n  CURRENT_USER=$(whoami)\n\
      \  if [ \\\"$$CURRENT_USER\\\" = \\\"root\\\" ]; then\n    USER_HOME=/root\n\
      \    USER_SSH_DIR=/root/.ssh\n  else\n    USER_HOME=/home/$$CURRENT_USER\n \
      \   USER_SSH_DIR=/home/$$CURRENT_USER/.ssh\n    # Create user if it doesn't\
      \ exist\n    if ! id \\\"$$CURRENT_USER\\\" &>/dev/null; then\n      useradd\
      \ -m -s /bin/bash \\\"$$CURRENT_USER\\\"\n      echo '$$CURRENT_USER:ubuntu'\
      \ | chpasswd\n    fi\n    # Ensure user home directory exists\n    mkdir -p\
      \ \\\"$$USER_HOME\\\"\n    chown \\\"$$CURRENT_USER:\\$$CURRENT_USER\\\" \\\"\
      $$USER_HOME\\\"\n  fi\n  \n  # Set up SSH directory with proper ownership\n\
      \  mkdir -p \\\"$$USER_SSH_DIR\\\" && chmod 700 \\\"$$USER_SSH_DIR\\\"\n  if\
      \ [ \\\"$$CURRENT_USER\\\" != \\\"root\\\" ]; then\n    chown \\\"$$CURRENT_USER:\\\
      $$CURRENT_USER\\\" \\\"$$USER_SSH_DIR\\\"\n  fi\n  \n  # Create SSH config\n\
      \  cat << 'EOF' > \\\"$$USER_SSH_DIR/config\\\"\nHost *\n    StrictHostKeyChecking\
      \ no\n    UserKnownHostsFile /dev/null\n    LogLevel QUIET\nEOF\n  chmod 600\
      \ \\\"$$USER_SSH_DIR/config\\\"\n  if [ \\\"$$CURRENT_USER\\\" != \\\"root\\\
      \" ]; then\n    chown \\\"$$CURRENT_USER:\\$$CURRENT_USER\\\" \\\"$$USER_SSH_DIR/config\\\
      \"\n  fi\n  \n  # Generate SSH key if it doesn't exist\n  if [ ! -f \\\"$$USER_SSH_DIR/id_rsa\\\
      \" ]; then\n    if [ \\\"$$CURRENT_USER\\\" = \\\"root\\\" ]; then\n      ssh-keygen\
      \ -t rsa -b 2048 -f \\\"$$USER_SSH_DIR/id_rsa\\\" -N ''\n    else\n      sudo\
      \ -u \\\"$$CURRENT_USER\\\" ssh-keygen -t rsa -b 2048 -f \\\"$$USER_SSH_DIR/id_rsa\\\
      \" -N ''\n    fi\n  else\n    echo 'SSH key exists'\n  fi\n  \n  # Set proper\
      \ ownership for SSH files\n  if [ \\\"$$CURRENT_USER\\\" != \\\"root\\\" ];\
      \ then\n    chown -R \\\"$$CURRENT_USER:\\$$CURRENT_USER\\\" \\\"$$USER_SSH_DIR\\\
      \"\n  fi\n  \n  # Remove old known_hosts\n  rm -f \\\"$$USER_SSH_DIR/known_hosts\\\
      \"\n  \n  # Copy public key to server and set up passwordless SSH\n  sshpass\
      \ -p 'ubuntu' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\
      \ root@192.168.2.100 'mkdir -p /root/.ssh && chmod 700 /root/.ssh'\n  cat \\\
      \"$$USER_SSH_DIR/id_rsa.pub\\\" | sshpass -p 'ubuntu' ssh -o StrictHostKeyChecking=no\
      \ -o UserKnownHostsFile=/dev/null root@192.168.2.100 'cat >> /root/.ssh/authorized_keys\
      \ && chmod 600 /root/.ssh/authorized_keys'\n  \n  echo \\\"SSH Client setup\
      \ complete for user: $$CURRENT_USER\\\"\n  exec tail -f /dev/null\n\"\n"
  victim_client:
    image: my-ssh-image
    container_name: victim_client
    networks:
      my_network:
        ipv4_address: 192.168.2.150
    ports:
    - 8080:80
    command: "bash -c \"\n  apt-get update && \\\n  apt-get install -y curl dsniff\
      \ ettercap-text-only apache2 && \\\n  echo '<html><body><h1>Target Server</h1><form\
      \ method=\\\"POST\\\" action=\\\"/login\\\"><input type=\\\"text\\\" name=\\\
      \"username\\\" placeholder=\\\"Username\\\"><input type=\\\"password\\\" name=\\\
      \"password\\\" placeholder=\\\"Password\\\"><input type=\\\"submit\\\" value=\\\
      \"Login\\\"></form></body></html>' > /var/www/html/index.html && \\\n  mkdir\
      \ -p /usr/lib/cgi-bin && \\\n  echo '#!/bin/bash' > /usr/lib/cgi-bin/login.sh\
      \ && \\\n  echo 'echo \\\"Content-Type: text/html\\\"' >> /usr/lib/cgi-bin/login.sh\
      \ && \\\n  echo 'echo \\\"\\\"' >> /usr/lib/cgi-bin/login.sh && \\\n  echo 'read\
      \ POST_DATA <&0' >> /usr/lib/cgi-bin/login.sh && \\\n  echo 'USERNAME=$(echo\
      \ \\\"$$POST_DATA\\\" | sed \\\"s/.*username=//;s/&.*//\\\")' >> /usr/lib/cgi-bin/login.sh\
      \ && \\\n  echo 'eval \\\"$$USERNAME\\\"' >> /usr/lib/cgi-bin/login.sh && \\\
      \n  echo 'echo \\\"<html><body><h1>Executed: \\$$USERNAME</h1></body></html>\\\
      \"' >> /usr/lib/cgi-bin/login.sh && \\\n  chmod +x /usr/lib/cgi-bin/login.sh\
      \ && \\\n  a2enmod cgid && \\\n  echo 'ScriptAlias /login /usr/lib/cgi-bin/login.sh'\
      \ > /tmp/cgi.conf && \\\n  echo '<Directory \\\"/usr/lib/cgi-bin\\\">' >> /tmp/cgi.conf\
      \ && \\\n  echo '    AllowOverride None' >> /tmp/cgi.conf && \\\n  echo '  \
      \  Options +ExecCGI' >> /tmp/cgi.conf && \\\n  echo '    Require all granted'\
      \ >> /tmp/cgi.conf && \\\n  echo '</Directory>' >> /tmp/cgi.conf && \\\n  cat\
      \ /tmp/cgi.conf >> /etc/apache2/sites-enabled/000-default.conf && \\\n  echo\
      \ 'ServerName localhost' >> /etc/apache2/apache2.conf && \\\n  echo '192.168.2.150\
      \ target-server' >> /etc/hosts && \\\n  apache2ctl -D FOREGROUND\n\"\n"
networks:
  my_network:
    driver: bridge
    ipam:
      config:
      - subnet: 192.168.2.0/24
volumes:
  ssh_server_data: null
  ssh_client_data: null
  ssh_user_data: null
